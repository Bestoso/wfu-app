function flatImagesArray() {
  return (
    (imageKeeper.length = 0),
    images.forEach((e) => imageKeeper.push(...e.images)),
    imageKeeper.flat()
  );
}
function renderImages(e) {
  e.map((e) => {
    const a = document.createElement("div");
    (a.className = "image__card"),
      (a.innerHTML = `\n            <img src="${e.url}" alt="waifu image" class="image" />\n            <div class="image__card__info">\n                <a href=${e.source} target="_blank"> Go to image </a>\n            </div>\n        `),
      container.appendChild(a);
  });
}
function filterByCategories(e) {
  imageKeeper.filter((a) => a.tags.forEach((a) => a.name.includes(e)));
}
const toggler = document.querySelector(".menu__toggler"),
  menu = document.querySelector(".menu"),
  container = document.querySelector(".images__container"),
  filtersSection = document.querySelector(".filters__section");
let images = [];
const imageKeeper = [],
  urlStructure =
    "https://api.waifu.im/search/?included_tags=hentai&ero&ass&milf&ecchi&paizuri&oral&many=true",
  hentaiCategories = [
    { name: "hentai", query: "&hentai" },
    { name: "ass", query: "&ass" },
    { name: "oral", query: "&oral" },
    { name: "milf", query: "&milf" },
    { name: "ecchi", query: "&ecchi" },
    { name: "paizuri", query: "&paizuri" },
    { name: "ero", query: "&ero" },
    { name: ".gif", query: "&gif" },
  ],
  renderButtons = () => {
    hentaiCategories.forEach((e) => {
      const a = document.createElement("button");
      (a.className = "filter__btn"),
        (a.innerHTML = `${e.name}`),
        filtersSection.appendChild(a);
    });
  },
  handleTogglers = () => {
    toggler.classList.toggle("active"), menu.classList.toggle("active");
  };
toggler.addEventListener("click", handleTogglers);
const fetchImages = async (e = urlStructure) => {
    const a = await fetch(e),
      { images: t } = await a.json();
    imageKeeper.push(...t);
  },
  getManyImages = async (e = 5) => {
    const a = [];
    for (let t = 0; t < e; t++)
      a.push(fetchImages()), await new Promise((e) => setTimeout(e, 250));
    return Promise.all(a);
  };
renderButtons(),
  getManyImages(30).then(() => {
    (images = imageKeeper), console.log(images), renderImages(images);
  });
